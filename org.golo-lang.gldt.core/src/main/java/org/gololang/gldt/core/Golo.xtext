/*******************************************************************************
* Copyright 2013 Jeff MAURY
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
grammar org.gololang.gldt.core.Golo with org.eclipse.xtext.xbase.Xbase hidden(WS) 

generate golo "http://www.gololang.org/gldt/core/Golo"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore 

CompilationUnit:
	BlankLines
	module=ModuleDeclaration
	BlankLines
	(imports+=ImportDeclaration BlankLines)*
	(declarations+=TopLevelDeclaration BlankLines)*/*ExpressionStatement*/;

terminal WS :
	' ' |
	'\t' |
	'\r'/*|
	'\f'*/;

terminal NEWLINE:
	'\n' | '\r' | '\r\n';

terminal MODULE: "module";

terminal IMPORT: "import";

terminal FUNCTION: "function";

terminal LOCAL: "local";

terminal RETURN: "return";

terminal IF: "if";

terminal ELSE: "else";

terminal WHILE: "while";

terminal FOR: "for";

terminal FOREACH: "foreach";

terminal IN: "in";

terminal THROW: "throw";

terminal TRY: "try";

terminal CATCH: "catch";

terminal FINALLY: "finally";

terminal CASE: "case";

terminal WHEN: "when";

terminal MATCH: "match";

terminal THEN: "then";

terminal OTHERWISE: "otherwise";

terminal AUGMENT: ("augment" | "pimp");

terminal BREAK: "break";

terminal CONTINUE: "continue";

terminal STRUCT: "struct";

ASSOCIATIVE_OPERATOR: ("*" | "/" | "%" |
                           "<" | "<=" | "==" | "!=" | ">" | ">=" | 
                           "is" | "isnt" |
                           "oftype" ); 

COMMUTATIVE_OPERATOR: ("+" | "-" |
                           "and" | "or" | "orIfNull");

terminal UNARY_OPERATOR: "not";

terminal VAR: "var";

terminal LET: "let";

terminal GNUMBER returns ecore::EInt: "-"? "0".."9" ("_"? "0".."9")*;

/*
 * LONG number should be defined as
 * terminal LONG_NUMBER returns ecore::ELong: NUMBER "_L";
 * but this confuse the lexer because once the DFA has detected a LONG_NUMBER
 * it will call ruleNUMBER which expected a number after the _
 * Having everything on the same definition will make the lexer of the alternative
 */
terminal LONG_NUMBER returns ecore::ELong: "-"? "0".."9" ("_"? "0".."9")* "_L";

terminal FLOATING_NUMBER returns ecore::EDouble: ("-")? ("0".."9")+ ("." ("0".."9")+)? ("e" ("0".."9")+)?;

terminal FLOAT returns ecore::EFloat: FLOATING_NUMBER "_F";

terminal STRING: "\"" (
    !("\"" | "\\" | "\n" | "\r")
    |
    ("\\" ("n" | "t" | "b" | "r" | "f" | "\\" | "'" | "\"") )
  )* "\"";

terminal fragment MULTI_QUOTE: "\"\"\"";

terminal MULTI_STRING : MULTI_QUOTE -> (!"\\" MULTI_QUOTE);

terminal CHAR: "'" (!("\n" | "\r" | "\"")) "'";

terminal NULL: "null";

terminal TRUE: "true";

terminal FALSE: "false";

/*terminal INVOCATION: ':' | '?:';*/

CLASSREF: name=QualifiedName '.' ( ('class' | MODULE));

FUNREF: "^" (prefix=QualifiedName "::")? name=ID;

terminal fragment OPEN_BRACKET: "[";

terminal COLL_START: ("array" | "list" | "set" | "map" | "vector" | "tuple" )? OPEN_BRACKET;

terminal fragment LETTER: "A".."Z" | "a".."z" | "_" | "$";

terminal fragment ID_REST: LETTER | "0".."9";

terminal fragment SUPER: "super";

terminal fragment NEW: "new";

terminal ID: ('`'? LETTER (ID_REST)*) ;


terminal COMMENT: "#" (!("\n" | "\r" | "\r\n"))* ("\n" | "\r" | "\r\n")?;

TerminalExpression:
	literal=Literal |
	functionInvocation=FunctionInvocation |
	reference=Reference |
	match=MatchStmt |
	function=FunctionStmt |
	collection=CollectionLiteral;

BlankLine:
	NEWLINE | COMMENT;

BlankLines:
	BlankLine*;

/*QualifiedName:
	elements+=IDENTIFIER ("." elements+=IDENTIFIER)*;*/

Arguments:
	parms+=ID ("," BlankLine? parms+= ID)*;

StringLiteral:
	value=STRING | value=MULTI_STRING;

CharLiteral:
	value=CHAR;

LongLiteral:
	value=LONG_NUMBER;
	
IntegerLiteral:
	value=GNUMBER;

ClassLiteral:
	value=CLASSREF;

DoubleLiteral:
	value=FLOATING_NUMBER;

FloatLiteral:
	value=FLOAT;

FunctionRef:
	value=FUNREF;

ModuleDeclaration:
	MODULE name=QualifiedName;

ImportDeclaration:
	IMPORT name=QualifiedName;

TopLevelDeclaration:
	AugmentDeclaration |
	((isLocal=LOCAL)? functionDecl=FunctionDeclaration) |
  struct=StructDeclararation;

AugmentDeclaration:
	AUGMENT target=QualifiedName "{" BlankLines
	(func+=FunctionDeclaration BlankLines)* "}";

FunctionDeclaration:
	FUNCTION name=ID "=" function=FunctionStmt;

StructDeclararation:
  STRUCT name=ID "=" "{" BlankLines
  member+=ID BlankLines ("," BlankLines member+=ID BlankLines)*
  "}";
  
Statement:
	BlankLine |
	Assignment |
	ExpressionStatement |
	ReturnStmt |
	LetOrVar |
	ConditionalBranching |
	WhileLoop |
	ForLoop |
	ForEachLoop |
	ThrowStmt |
	TryCatchFinally |
	CaseStmt |
	ContinueStmt |
	BreakStmt;

ContinueStmt:
	CONTINUE;

BreakStmt:
	BREAK;

ThrowStmt:
	THROW BlankLine? ExpressionStatement;

WhileLoop:
	WHILE ExpressionStatement block=Block;

ForLoop:
	FOR "(" BlankLine? letorvar=LetOrVar ","
	        BlankLine? expression=ExpressionStatement ","
	        BlankLine? statement=Statement ")"
	block=Block;

ForEachLoop:
	FOREACH (("(" elemenId=ID IN expression=ExpressionStatement ")" ) |
	        (elemenId=ID IN expression=ExpressionStatement))
	        block=Block; 

TryCatchFinally:
	TRY tryBlock=Block
	((FINALLY finallyBlock=Block) |
     (CATCH "(" exceptionId=ID ")" catchBlock=Block (FINALLY finallyBlock=Block)?));
	 
ExpressionStatement:
	CommutativeExpression;

	
UnaryExpression:
	token=UNARY_OPERATOR commutativeExpression=CommutativeExpression;

CommutativeExpression:
	expressions+=AssociativeExpression
	(BlankLine? token+=COMMUTATIVE_OPERATOR BlankLine? expressions+=AssociativeExpression)*;

AssociativeExpression:
	(
	 ("(" BlankLine? commutativeExpression=CommutativeExpression BlankLine? ")") |
	 terminalExpression=TerminalExpression |
	 unaryExpression=UnaryExpression)
	BlankLine?
	((token+=ASSOCIATIVE_OPERATOR BlankLine? associativeExpression+=AssociativeExpression) |
	 (BlankLine? (':' | '?:') BlankLine? methodInvocation+=MethodInvocation)
	)*
	BlankLine?;

MethodInvocation:
	token=ID =>"(" BlankLine? expressions=Expressions? ")"
	anonymousInvocation+=AnonymousFunctionInvocation*;

Block:
	{Block}
	"{" statements+=Statement* "}";

FunctionStmt:
	("|" arguments=Arguments (varargsToken="...")? "|")?
	(block=Block |
	 ("->" BlankLine? expressionStatement=ExpressionStatement));
	 
Literal:
	value=ClassLiteral |
	value=StringLiteral |
	value=CharLiteral |
	value=FloatLiteral |
	value=DoubleLiteral |
	value=LongLiteral |
	value=IntegerLiteral |
	isNull?=NULL |
	isTrue?=TRUE |
	isFalse?=FALSE |
	value=FunctionRef;

Reference:
	id=ID;

CollectionLiteral:
  COLL_START BlankLine?
  (statements+=ExpressionStatement ("," BlankLine? statements+=ExpressionStatement)* BlankLine?)?
  "]"
;
LetOrVar:
	(LET idToken=ID "=" BlankLine? ExpressionStatement) |
	(VAR idToken=ID "=" BlankLine? ExpressionStatement);

Assignment:
	idToken=ID "=" BlankLine? expressionStatement=ExpressionStatement;

ReturnStmt:
	{ReturnStmt}
	RETURN (BlankLine? expressionStatement=ExpressionStatement)?;

Expressions:
	expressions+=ExpressionStatement ("," BlankLine? expressions+=ExpressionStatement)*;
	
AnonymousFunctionInvocation:
  "(" BlankLine? expressions=Expressions? ")";
  
FunctionInvocation:
	name=QualifiedName "(" BlankLine? expression=Expressions? ")"
	anonymousInvocations+=AnonymousFunctionInvocation*;
	
ConditionalBranching:
	IF expr=ExpressionStatement block=Block
	(ELSE (elseCondition=ConditionalBranching | elseBlock=Block))?;

CaseStmt:
	CASE "{" BlankLines
	( WHEN expressions+=ExpressionStatement block+=Block BlankLines )+
    OTHERWISE Block BlankLines
  "}";

MatchStmt:
	MATCH "{" BlankLines
    ( WHEN BlankLines whenExpression+=ExpressionStatement BlankLines 
      THEN BlankLines thenExpression+=ExpressionStatement BlankLines )+
    OTHERWISE  BlankLines otherwiseExpression=ExpressionStatement BlankLines
  "}";

